import {
  createConnection,
  createLongLivedTokenAuth,
  HassEntities,
  subscribeEntities,
} from "home-assistant-js-websocket";

import { createSocket } from "./socket";
import { getAllModules } from "../actions/getAllModules";

export interface IHassConnection {
  url: string;
  token: string;
}

export const connect = async ({url, token}: IHassConnection) => {
  if (!url) throw new Error("HASS URL not found");
  if (!token) throw new Error("Long Lived Token not found");

  const auth = createLongLivedTokenAuth(url, token);

  const connection = await createConnection({
    auth,
    createSocket: async () => createSocket(auth, true),
  });

  // connection.subscribeEvents(({ data }: any) => runAutomations(data), "state_changed");

  let entities: HassEntities = {};
  subscribeEntities(connection, async (res) => (entities = res));

  return { connection, entities };
};

// const runAutomations = async (event: any) => {
//   const automations = await getAllModules("automations");

//   automations.forEach((automation) => {
//     if (automation.state === "running") {
//       console.log("Already Running...");
//       return;
//     }
//     automation.state = "running";

//     const triggered = automation.triggers.some(({ entity_id, validation }: any) => {
//       if (event.entity_id !== entity_id) return false;
//       return validation(event);
//     });

//     console.log({ triggered, entity_id: event.entity_id });

//     if (triggered) automation.actions.forEach((action: any) => action());

//     automation.state = "idle";
//   });
// };
// export const callService = async (data: MessageBase) => connection?.sendMessagePromise(data);
